{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"par",
				"partialN"
			],
			[
				"rena",
				"renameDirectory"
			],
			[
				"recovere",
				"recoveredS"
			],
			[
				"create",
				"createDirectoryIfMissing"
			],
			[
				"resto",
				"restoreS"
			],
			[
				"check",
				"checkpoint"
			],
			[
				"tr",
				"traceM"
			],
			[
				"throw",
				"throwM"
			],
			[
				"when",
				"whenM"
			],
			[
				"on",
				"onExc"
			],
			[
				"onE",
				"onExc"
			],
			[
				"mo",
				"modifyTMVarWithOnException"
			],
			[
				"Monad",
				"MonadUnliftIO"
			],
			[
				"doest",
				"doesFileExist"
			],
			[
				"part",
				"partialN"
			],
			[
				"does",
				"doesDirectoryExist"
			],
			[
				"curre",
				"currentS"
			],
			[
				"prev",
				"previousS"
			],
			[
				"await",
				"awaitForever"
			],
			[
				"runCon",
				"runConduitRes"
			],
			[
				"stat",
				"stateFolder"
			],
			[
				"parti",
				"partialStateFolder"
			],
			[
				"curr",
				"currentExists"
			],
			[
				"dos",
				"doesDirectoryExist"
			],
			[
				"MO",
				"MonadIO"
			],
			[
				"recover",
				"recoverFromPartialCheckpoint"
			],
			[
				"final",
				"finalConf"
			],
			[
				"CV",
				"CVal"
			],
			[
				"CM",
				"CMapExpanded"
			],
			[
				"Caceh",
				"CacheState"
			],
			[
				"User",
				"UsersCS"
			],
			[
				"fetchM",
				"fetchMapCWith"
			],
			[
				"Sta",
				"StateT"
			],
			[
				"Read",
				"ReaderT"
			],
			[
				"ex",
				"extractCQuery"
			],
			[
				"li",
				"liftQueryCS"
			],
			[
				"loo",
				"lookupC"
			],
			[
				"B",
				"ByteString"
			],
			[
				"CMap",
				"CMapValue"
			],
			[
				"fix",
				"fixText"
			],
			[
				"IxSetPri",
				"IxsetPrimaryKeyT"
			],
			[
				"IX",
				"IxSet"
			],
			[
				"Ix",
				"IxSet"
			],
			[
				"reo",
				"reopenCacheState"
			],
			[
				"CA",
				"CacheMode"
			],
			[
				"cach",
				"CacheMode"
			],
			[
				"Cach",
				"CacheModeAll"
			],
			[
				"user",
				"userId"
			],
			[
				"toL",
				"totalL2"
			],
			[
				"to",
				"totalL"
			],
			[
				"pure",
				"pureUser"
			],
			[
				"Us",
				"User"
			],
			[
				"genera",
				"generateUsersPure"
			],
			[
				"To",
				"total"
			],
			[
				"close",
				"closeCacheState"
			],
			[
				"Int",
				"Integer"
			],
			[
				"CacheMo",
				"CacheModeAll"
			],
			[
				"runI",
				"runInBoundThread"
			],
			[
				"from",
				"fromIdx"
			],
			[
				"un",
				"unit_cachePerformance"
			],
			[
				"insertMa",
				"insertManyC"
			],
			[
				"Cm",
				"CMapKey"
			],
			[
				"sho",
				"showT"
			],
			[
				"test",
				"testGroup"
			],
			[
				"des",
				"deserialiseIxVal"
			],
			[
				"k",
				"kvs"
			],
			[
				"Cac",
				"CacheModeAll"
			],
			[
				"CAc",
				"CacheModeNone"
			],
			[
				"getC",
				"getCacheModePure"
			],
			[
				"Seg",
				"SegmentCacheModeNone"
			],
			[
				"SegmentCac",
				"SegmentCacheModeAll"
			],
			[
				"Segmentcach",
				"SegmentCacheModeGlobal"
			],
			[
				"segme",
				"segmentCacheMode"
			],
			[
				"Reop",
				"Reopening"
			],
			[
				"modi",
				"modifyTMVarSafe"
			],
			[
				"Mon",
				"MonadIO"
			],
			[
				"Env",
				"Environment"
			],
			[
				"Segmen",
				"SegmentsState"
			],
			[
				"Segment",
				"SegmentS"
			],
			[
				"exp",
				"expandVal"
			],
			[
				"exap",
				"expandVal"
			],
			[
				"CVa",
				"CValIxs"
			],
			[
				"key",
				"keys"
			],
			[
				"w",
				"where"
			],
			[
				"ind",
				"indexableToIndexes"
			],
			[
				"ixs",
				"ixsetIdxsKeyPrefix"
			],
			[
				"Ext",
				"ExtractFromNP"
			],
			[
				"wrap",
				"wrappedIxFun"
			],
			[
				"tran",
				"transformIx"
			],
			[
				"Has",
				"HashMap"
			],
			[
				"CD",
				"CDBMapValue"
			],
			[
				"CDB",
				"CDBMapKey"
			],
			[
				"empt",
				"emptyVal"
			],
			[
				"segn",
				"segmentName"
			],
			[
				"Segm",
				"SegmentDb"
			],
			[
				"insert",
				"insertC"
			],
			[
				"seg",
				"segmentName"
			],
			[
				"Users",
				"UsersHM"
			],
			[
				"Cace",
				"CacheState"
			],
			[
				"cas",
				"cacheState"
			],
			[
				"V",
				"ValidCSegment"
			],
			[
				"Rest",
				"restoreSegmentTrans"
			],
			[
				"Re",
				"ReadWrite"
			],
			[
				"inser",
				"insertMapC"
			],
			[
				"getS",
				"getSegmentDb"
			],
			[
				"getD",
				"getSegmentDb"
			],
			[
				"Data",
				"Database"
			],
			[
				"Segme",
				"SegmentsState"
			],
			[
				"qualif",
				"qualified"
			],
			[
				"C",
				"CVal"
			],
			[
				"io",
				"ioResPost"
			],
			[
				"ioR",
				"ioRPost"
			],
			[
				"usF",
				"usFixed"
			],
			[
				"upa",
				"upairsFixed"
			],
			[
				"fi",
				"fixPair"
			],
			[
				"us",
				"usf2"
			],
			[
				"PostGr",
				"PostgresConduitT"
			],
			[
				"P",
				"Proxy"
			],
			[
				"valu",
				"valueFill"
			],
			[
				"row",
				"rowActions"
			],
			[
				"Pr",
				"Proxy"
			],
			[
				"Post",
				"PostgresRow"
			],
			[
				"Vali",
				"ValidAppAcidSerialise"
			],
			[
				"usf",
				"usf1"
			],
			[
				"run",
				"runConversionToEither"
			],
			[
				"Con",
				"ConduitT"
			],
			[
				"jso",
				"jsonV"
			],
			[
				"qual",
				"qualified"
			]
		]
	},
	"buffers":
	[
		{
			"file": "ghcjs.cabal",
			"settings":
			{
				"buffer_size": 13759,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/boot/boot.yaml",
			"settings":
			{
				"buffer_size": 1756,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/code/react-vs-react-flux-vs-reflex-frp/miso/miso-table.cabal",
			"settings":
			{
				"buffer_size": 2306,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ghc/libraries/base/base.cabal",
			"settings":
			{
				"buffer_size": 9842,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "    \n    git submodule update --init --recursive\n\nmake sure you have a global ghc installation (symlink .stack[..] ghc and ghc-pkg to .local/bin/ghc ghc-pkg)\n    \n    stack install alex happy cabal-install\n    ./utils/makePackages.sh\n    stack build\n    stack exec ghcjs-boot\n\n    stack build --test\n\nWe have to install a bunch of packages for the tests.\n\nI've added primitive to the stage1b boot.yaml because it has a patch\nAlso manually changed the bounds in lib/boot/pkg primitive.cabal to use the base that actually comes with ghc\n\n    (stack exec cabal update)\n\n    stack exec cabal install -- --ghcjs --with-compiler /code/ghcjs/ghcjs/.stack-work/install/x86_64-linux/lts-11.20/8.2.2/bin/ghcjs --with-hc-pkg /code/ghcjs/ghcjs/.stack-work/install/x86_64-linux/lts-11.20/8.2.2/bin/ghcjs-pkg random-1.1 syb-0.7 text-1.2.3.0 parallel-3.2.2.0 QuickCheck-2.10.1 vector-0.12.0.1  stm-2.4.5.0 parsec-3.1.13.0\n",
			"file": "STACK.md",
			"file_size": 798,
			"file_write_time": 131782127463279995,
			"settings":
			{
				"buffer_size": 907,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/boot/pkg/primitive/primitive.cabal",
			"settings":
			{
				"buffer_size": 1859,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 357.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"prety",
				"Pretty JSON: Format (Pretty Print) JSON"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"pacak",
				"Package Control: Install Package"
			],
			[
				"packag",
				"Package Control: Enable Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"Paca",
				"Package Control: Install Package"
			],
			[
				"Package Control: IN",
				"Package Control: Install Package"
			]
		],
		"width": 623.0
	},
	"console":
	{
		"height": 562.0,
		"history":
		[
			"view.settings().get('syntax').lower()",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/code/ghcjs/ghcjs"
	],
	"file_history":
	[
		"/code/ghcjs/ghcjs/.stack-work/logs/ghcjs-8.2.0.1-test.log",
		"/code/ghcjs/ghcjs/src-bin/Boot.hs",
		"/code/ghcjs/ghcjs/ghcjs.cabal",
		"/code/ghcjs/ghcjs/README.markdown",
		"/code/ghcjs/ghcjs/lib/ghc-api-ghcjs/ghc-api-ghcjs.cabal",
		"/code/ghcjs/ghcjs/lib/ghc-api-ghcjs/compiler/typecheck/TcSplice.hs",
		"/code/ghcjs/ghcjs/utils/makePackages.sh",
		"/code/ghcjs/ghcjs/ghc/libraries/primitive/primitive.cabal",
		"/code/ghcjs/ghcjs/test/TestRunner.hs",
		"/code/ghcjs/ghcjs/ghcjs.sublime-project",
		"/code/ghcjs/ghcjs/lib/boot/pkg/base/base.cabal",
		"/code/ghcjs/ghcjs/lib/boot/pkg/primitive/primitive.cabal",
		"/code/react-vs-react-flux-vs-reflex-frp/miso/stack.yaml",
		"/code/ghcjs/ghcjs/utils/testPackages.constraints",
		"/code/ghcjs/ghcjs/utils/testPackages.sh",
		"/code/ghcjs/ghcjs/utils/testOptimizer.hs",
		"/code/ghcjs/ghcjs/utils/updateTestSuite.hs",
		"/code/ghcjs/ghcjs/utils/makeSandbox.sh",
		"/code/ghcjs/ghcjs/lib/upstream/pkg/primitive/changelog.md",
		"/code/ghcjs/ghcjs/lib/upstream/pkg/primitive/Data/Primitive.hs",
		"/code/ghcjs/ghcjs/lib/patches/primitive.patch",
		"/code/ghcjs/ghcjs/lib/boot/pkg/primitive/Data/Primitive/Internal/Operations.hs",
		"/code/ghcjs/ghcjs/STACK.md",
		"/code/react-vs-react-flux-vs-reflex-frp/miso/src/Main.hs",
		"/code/generics-sop/src/Generics/SOP/Constraint.hs",
		"/code/react-vs-react-flux-vs-reflex-frp/miso/html/table.html",
		"/code/react-vs-react-flux-vs-reflex-frp/reflex-frp/.gitignore",
		"/code/react-vs-react-flux-vs-reflex-frp/reflex-frp/stack.yaml",
		"/code/react-vs-react-flux-vs-reflex-frp/reflex-frp/Makefile",
		"/code/react-vs-react-flux-vs-reflex-frp/miso/miso-table.cabal",
		"/code/generics-sop/doctest.sh",
		"/code/react-vs-react-flux-vs-reflex-frp/reflex-frp/html/table.html",
		"/code/react-vs-react-flux-vs-reflex-frp/reflex-frp/html/tabletext.html",
		"/code/generics-sop/src/Generics/SOP/NP.hs",
		"/code/generics-sop/src/Generics/SOP/Dict.hs",
		"/code/quartz/quartz.sublime-project",
		"/code/generics-sop/src/Generics/SOP.hs",
		"/code/ghcjs/ghcjs/stack.yaml",
		"/code/ghcjs/ghcjs/Setup.hs",
		"/code/ghcjs/ghcjs/ghc/configure",
		"/code/ghcjs/ghcjs/ghc/README.md",
		"/code/acid-world/stack.yaml",
		"/home/francis/.stack/global-project/README.txt",
		"/code/ghcjs/ghcjs/cabal.project",
		"/code/ghcjs/ghcjs/ghc/install-sh",
		"/code/acid-world/shared/Shared/App.hs",
		"/code/acid-world/shared/Shared/Schema.hs",
		"/code/acid-world/test/Test.hs",
		"/code/acid-world/acid-world.cabal",
		"/code/acid-world/benchmark/Benchmark.hs",
		"/code/acid-world/README.md",
		"/code/acid-world/src/Acid/Core/Backend/Postgresql.hs",
		"/code/acid-world/src/Acid/Core/Serialise/Postgresql.hs",
		"/code/acid-world/src/Acid/Core/Segment.hs",
		"/code/acid-world/src/Acid/Core/Utils.hs",
		"/code/quartz/quartz-server/stack.yaml",
		"/code/quartz/example/example-server/stack.yaml",
		"/code/project-m36-typed/stack.yaml",
		"/code/project-m36-typed/project-m36-typed.cabal",
		"/code/quartz/snapshot.yaml",
		"/code/project-m36-typed/src/ProjectM36/Typed.hs",
		"/code/project-m36-typed/LICENSE",
		"/code/acid-world/src/Acid/Core/Backend/FS.hs",
		"/code/acid-world/runBench.sh",
		"/code/acid-world/runTest.sh",
		"/code/acid-world/LICENSE",
		"/code/acid-world/src/Acid/Core/CacheState.hs",
		"/code/acid-world/src/Acid/Core/Backend/Abstract.hs",
		"/code/acid-world/src/Acid/Core/State/PureState.hs",
		"/code/acid-world/src/Acid/Core/State/Abstract.hs",
		"/code/acid-world/src/Acid/Core.hs",
		"/code/acid-world/src/dataFiles/stateFolderReadMe.md",
		"/code/acid-world/src/Acid/Core/State/CacheState.hs",
		"/code/acid-world/bench.sh",
		"/code/acid-world/src/Acid/Core/Backend.hs",
		"/code/ixset-typed/src/Data/IxSet/Typed.hs",
		"/code/acid-world/.ghcid",
		"/code/lmdb-simple/src/Database/LMDB/Simple.hs",
		"/code/ixset-typed/ixset-typed.cabal",
		"/code/blizzard-server/stack.yaml",
		"/code/acid-world/src/Acid/Core/Serialise/CBOR.hs",
		"/code/quartz/example/example-common/stack.yaml",
		"/code/goose/server/stack.yaml",
		"/code/quartz/quartz-common/stack.yaml",
		"/media/francis/data/Videos/VideoEditing/20180803/PRIVATE/AVCHD/BDMV/CLIPINF/00000.CPI",
		"/code/acid-world/src/Acid/Core/State.hs",
		"/code/acid-world/src/Acid/Core/Serialise/Abstract.hs",
		"/code/acid-world/src/Acid/Core/Serialise/JSON.hs",
		"/code/acid-world/src/Acid/Core/Serialise/SafeCopy.hs",
		"/code/acid-world/src/Acid/Core/Backend/Memory.hs",
		"/code/acid-world/src/Acid/Core/Serialise.hs",
		"/code/goose/goose/goose.cabal",
		"/code/acid-world/src/Acid/Core/Backend/Groundhog.hs",
		"/code/acid-world/src/Acid/Core/Serialise/Groundhog.hs",
		"/code/goose/goose/src/Goose/Dummy/Resources.hs",
		"/code/acid-world/tmp/test9197/archive/2018-07-25_19-12-25-006911_UTC/events.json",
		"/code/acid-world/tmp/test9197/archive/2018-07-25_19-12-25-006911_UTC/events.json.check",
		"/code/acid-world/tmp/test9197/current/events.json.check",
		"/code/acid-world/tmp/test9197/archive/2018-07-25_19-12-25-006911_UTC/checkpoint/Addresses.json.check",
		"/code/acid-world/tmp/test9197/README.md",
		"/code/goose/server/goose-server.cabal",
		"/code/acid-world/tmp/test8566/current/events.json.check",
		"/code/acid-world/src/Acid/Core/Serialise/JSON/Partial.hs",
		"/code/acid-world/tmp/test11039/current/events.json1",
		"/code/acid-world/tmp/test12122/current/events.json1",
		"/code/acid-world/tmp/test4883/current/events.json1",
		"/code/acid-world/tmp/test8939/current/events.json1",
		"/code/acid-world/tmp/test8849/current/events.json1",
		"/code/acid-world/tmp/test5243/current/events.json1",
		"/code/acid-world/tmp/test5243/current/events.json",
		"/code/acid-world/tmp/test3694/current/events.json1",
		"/code/acid-world/tmp/test8608/current/events.json1",
		"/code/acid-world/tmp/test7495/current/events.json1",
		"/code/acid-world/tmp/test6719/current/events",
		"/code/acid-world/tmp/test6712/current/events",
		"/code/acid-world/tmp/test6713/current/events",
		"/code/acid-world/tmp/test6714/current/events1",
		"/code/acid-world/tmp/test6717/current/events1",
		"/code/acid-world/tmp/test6718/current/events",
		"/code/acid-world/tmp/test6714/current/events",
		"/code/acid-world/tmp/test6715/current/events",
		"/code/acid-world/tmp/test6720/current/events1",
		"/code/acid-world/tmp/test6720/current/events",
		"/code/acid-world/tmp/test6721/current/events1",
		"/code/acid-world/tmp/test11394/current/checkpoint/Addresses.gz.check",
		"/code/acid-world/tmp/test7943/current/checkpoint/Addresses.check",
		"/code/acid-world/tmp/test7718/current/checkpoint/Addresses.check",
		"/code/acid-world/tmp/test10158/current/checkpoint/Addresses.gz.check"
	],
	"find":
	{
		"height": 22.0
	},
	"find_in_files":
	{
		"height": 118.0,
		"where_history":
		[
			"",
			"/code/ghcjs/ghcjs",
			"",
			"/home/francis/Documents/code/acid-state/src",
			"",
			"/code/stack/doc",
			"/code/stack"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"copy_patch_boot_package_sdist",
			"boot.yaml",
			"pkg/template-haskell",
			"cabalStage1",
			"installStage",
			"stage1b",
			"random-",
			"aeson",
			"primitive",
			"random",
			"stage2",
			"cabalStage1",
			"installStage",
			"installStage1",
			"upstream",
			"data.primitive",
			"primitive",
			"checkRequiredPackages",
			"is required by the test",
			"test",
			"equire a constraint for every element of a list.",
			"lens",
			"GHCSRC",
			"configuring GHC tree",
			"unsafe",
			"ghc",
			"unsafe",
			"coerce",
			"unsafe",
			"symbolVal",
			"toUniqueText",
			"touniquetext",
			"handleUpdateEventC",
			"startOrResumeCurrentEventsLog",
			"data awexception",
			"awexception",
			"onException",
			"startOrResumeCurrentEventsLog",
			"=<<",
			"modifyTMVar",
			"unit_partialCheckpointAndRestore",
			"unit_checkpointAndRestoreState",
			"unit_partialCheckpointAndRestore",
			"persistentBackendSerialiserTests",
			"startOrResumeCurrentEventsLog",
			"partialStateFolder",
			"makeEventPathWith",
			"makeEventPath",
			"makeEventPathWith",
			"makeEventPath",
			"previousStateFolder",
			"currentCheckpointFolder",
			"@todo",
			"previousStateFolder",
			"previous",
			"gzip",
			"Invariant",
			"invar",
			"runChangedSegmentsInvariantsMap",
			"registerChangedSegment",
			"invar",
			"invariants",
			"runInsertUserC",
			":<<",
			"Eventable",
			"class eventable",
			"mkEvent",
			"toRunEvent",
			"HasSegment",
			"defaul",
			"State.CacheState",
			"liftQuery",
			"expandC",
			"=<<",
			">>=",
			"<<=",
			"iscmap",
			"postgres",
			"attempt to access",
			"postgre",
			"traceM",
			"handleUpdateEventC",
			"withTransaction",
			"unit_insertAndRestoreStatePostgres",
			"postgresSpecificTests",
			"getPrimaryKey",
			"CValIxs",
			"IsIndexOf",
			"IxsetPrimaryKey",
			"pKeyFromCValIx",
			"pKeyFromCValIxs",
			"unit_cacheMemoryUsage",
			"testCheckSum",
			"unit_cacheMemoryUsage",
			"putStrLn",
			"generateUsers",
			"deepseq",
			"TMVar",
			"conversionError",
			"ToField",
			"insertMapC",
			"insertManyC",
			"insertManyMapC",
			"nfdata",
			"generateUsers",
			"insertMapC",
			"insertMapC ::",
			"CValIxsRef",
			"CValRef",
			"unit_insertAndRestoreStateCacheState",
			"restoreSegmentTrans",
			"restoreMapC",
			"insertMapC",
			"modifyTMVarSafe",
			" error ",
			"error ",
			"openEnvironment",
			"modifyTMVarSafe",
			"CAppSegments",
			"openCacheStateFresh",
			"expandVal",
			"EventArgsContainer",
			"IxsetPrimaryKey",
			"restoreMapC",
			"runUpdateCS",
			"toListMapC",
			"insertMapC",
			"emptyMapC"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": true,
		"regex": false,
		"replace_history":
		[
			" ",
			"Postgresql",
			"phonenumber"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "ghcjs.cabal",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13759,
						"regions":
						{
						},
						"selection":
						[
							[
								11839,
								11839
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/SublimeHaskell/Syntaxes/Cabal.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 3504.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "lib/boot/boot.yaml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1756,
						"regions":
						{
						},
						"selection":
						[
							[
								1167,
								1167
							]
						],
						"settings":
						{
							"syntax": "Packages/YAML/YAML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 234.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/code/react-vs-react-flux-vs-reflex-frp/miso/miso-table.cabal",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2306,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SublimeHaskell/Syntaxes/Cabal.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "ghc/libraries/base/base.cabal",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9842,
						"regions":
						{
						},
						"selection":
						[
							[
								1481,
								1481
							]
						],
						"settings":
						{
							"syntax": "Packages/SublimeHaskell/Syntaxes/Cabal.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 351.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "STACK.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 907,
						"regions":
						{
						},
						"selection":
						[
							[
								534,
								534
							]
						],
						"settings":
						{
							"syntax": "Packages/MarkdownEditing/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/boot/pkg/primitive/primitive.cabal",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1859,
						"regions":
						{
						},
						"selection":
						[
							[
								1157,
								1157
							]
						],
						"settings":
						{
							"syntax": "Packages/SublimeHaskell/Syntaxes/Cabal.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 88.0
	},
	"output.sublime_haskell_output_panel":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "ghcjs.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ghc",
				"ghcjs.cabal"
			],
			[
				"boot.",
				"src-bin/Boot.hs"
			],
			[
				"stack.",
				"STACK.md"
			],
			[
				".ca",
				"ghcjs.cabal"
			],
			[
				"stac",
				"STACK.md"
			],
			[
				"Read",
				"README.markdown"
			],
			[
				"sta",
				"stack.yaml"
			],
			[
				"ben",
				"benchmark/Benchmark.hs"
			],
			[
				"Be",
				"benchmark/Benchmark.hs"
			],
			[
				"cab",
				"acid-world.cabal"
			],
			[
				"Test",
				"test/Test.hs"
			],
			[
				"sche",
				"shared/Shared/Schema.hs"
			],
			[
				"app",
				"shared/Shared/App.hs"
			],
			[
				"seg",
				"src/Acid/Core/Segment.hs"
			],
			[
				"Re",
				"README.md"
			],
			[
				"post",
				"src/Acid/Core/Serialise/Postgresql.hs"
			],
			[
				"core",
				"src/Acid/Core.hs"
			],
			[
				"runT",
				"runTest.sh"
			],
			[
				"backe",
				"src/Acid/Core/Backend/Abstract.hs"
			],
			[
				"stat",
				"src/dataFiles/stateFolderReadMe.md"
			],
			[
				"pure",
				"src/Acid/Core/State/PureState.hs"
			],
			[
				"fs",
				"src/Acid/Core/Backend/FS.hs"
			],
			[
				"sc",
				"shared/Shared/Schema.hs"
			],
			[
				"Rea",
				"README.md"
			],
			[
				"ut",
				"src/Acid/Core/Utils.hs"
			],
			[
				"basc",
				"src/Acid/Core/Backend/Abstract.hs"
			],
			[
				"bac",
				"src/Acid/Core/Backend.hs"
			],
			[
				"Cac",
				"src/Acid/Core/State/CacheState.hs"
			],
			[
				"T",
				"test/Test.hs"
			],
			[
				"ostg",
				"src/Acid/Core/Backend/Postgresql.hs"
			],
			[
				"Te",
				"test/Test.hs"
			],
			[
				"sch",
				"shared/Shared/Schema.hs"
			],
			[
				"run",
				"runTest.sh"
			],
			[
				"runB",
				"runBench.sh"
			],
			[
				"a",
				"acid-world.cabal"
			],
			[
				"App",
				"shared/Shared/App.hs"
			],
			[
				"Tes",
				"test/Test.hs"
			],
			[
				"cach",
				"src/Acid/Core/State/CacheState.hs"
			],
			[
				"cac",
				"src/Acid/Core/State/CacheState.hs"
			],
			[
				"cbor",
				"src/Acid/Core/Serialise/CBOR.hs"
			],
			[
				"u",
				"src/Acid/Core/Utils.hs"
			],
			[
				"ca",
				"acid-world.cabal"
			],
			[
				"uti",
				"src/Acid/Core/Utils.hs"
			],
			[
				"test",
				"test/Test.hs"
			],
			[
				"sh",
				"shared/Shared/Schema.hs"
			],
			[
				"caba",
				"acid-world.cabal"
			],
			[
				"backa",
				"src/Acid/Core/Backend/Abstract.hs"
			],
			[
				"cbo",
				"src/Acid/Core/Serialise/CBOR.hs"
			],
			[
				"state",
				"src/Acid/Core/State/Abstract.hs"
			],
			[
				"st",
				"stack.yaml"
			],
			[
				"state/ab",
				"src/Acid/Core/State/Abstract.hs"
			],
			[
				"ac",
				"acid-world.cabal"
			],
			[
				"mem",
				"src/Acid/Core/Backend/Memory.hs"
			],
			[
				"js",
				"src/Acid/Core/Serialise/JSON.hs"
			],
			[
				"backend/ab",
				"src/Acid/Core/Backend/Abstract.hs"
			],
			[
				"FS",
				"src/Acid/Core/Backend/FS.hs"
			],
			[
				"Saf",
				"src/Acid/Core/Serialise/SafeCopy.hs"
			],
			[
				"p",
				"src/Acid/Core/Backend/Postgresql.hs"
			],
			[
				"pso",
				"src/Acid/Core/Backend/Postgresql.hs"
			],
			[
				"serialisea",
				"src/Acid/Core/Serialise/Abstract.hs"
			],
			[
				"backend",
				"src/Acid/Core/Backend/Abstract.hs"
			],
			[
				"backend/a",
				"src/Acid/Core/Backend/Abstract.hs"
			],
			[
				"seri",
				"src/Acid/Core/Serialise/Abstract.hs"
			],
			[
				"json",
				"src/Acid/Core/Serialise/JSON.hs"
			],
			[
				"aci",
				"acid-world.cabal"
			],
			[
				"ser",
				"src/Acid/Core/Serialise.hs"
			],
			[
				"state/a",
				"src/Acid/Core/State/Abstract.hs"
			],
			[
				"ure",
				"src/Acid/Core/State/PureState.hs"
			],
			[
				"po",
				"src/Acid/Core/Backend/Postgresql.hs"
			],
			[
				"state/",
				"src/Acid/Core/State/Abstract.hs"
			],
			[
				"abs",
				"src/Acid/Core/Serialise/Abstract.hs"
			],
			[
				"back",
				"src/Acid/Core/Backend.hs"
			],
			[
				"Fs",
				"src/Acid/Core/Backend/FS.hs"
			],
			[
				"cre",
				"src/Acid/Core.hs"
			],
			[
				"cb",
				"src/Acid/Core/Serialise/CBOR.hs"
			],
			[
				"safe",
				"src/Acid/Core/Serialise/SafeCopy.hs"
			],
			[
				"Cb",
				"src/Acid/Core/Serialise/CBOR.hs"
			],
			[
				"Mem",
				"src/Acid/Core/Backend/Memory.hs"
			],
			[
				"sae",
				"src/Acid/Core/Serialise/SafeCopy.hs"
			],
			[
				"seria",
				"src/Acid/Core/Serialise.hs"
			],
			[
				"sere",
				"src/Acid/Core/Serialise/Abstract.hs"
			],
			[
				"segm",
				"src/Acid/Core/Segment.hs"
			],
			[
				"Seg",
				"src/Acid/Core/Segment.hs"
			],
			[
				"F",
				"src/Acid/Core/Backend/FS.hs"
			],
			[
				"asb",
				"src/Acid/Core/Backend/Abstract.hs"
			],
			[
				"sa",
				"src/Acid/Core/Serialise/SafeCopy.hs"
			],
			[
				"JS",
				"src/Acid/Core/Serialise/JSON.hs"
			],
			[
				"serial",
				"src/Acid/Core/Serialise/Abstract.hs"
			],
			[
				"jso",
				"src/Acid/Core/Serialise/JSON.hs"
			],
			[
				"ghci",
				".ghcid"
			],
			[
				"backend/",
				"src/Acid/Core/Backend/Abstract.hs"
			],
			[
				"AP",
				"shared/Shared/App.hs"
			],
			[
				"serialise/a",
				"src/Acid/Core/Serialise/Abstract.hs"
			],
			[
				"backed",
				"src/Acid/Core/Backend/Abstract.hs"
			],
			[
				"Safe",
				"src/Acid/Core/Serialise/SafeCopy.hs"
			],
			[
				"JSOn",
				"src/Acid/Core/Serialise/JSON.hs"
			],
			[
				"CBo",
				"src/Acid/Core/Serialise/CBOR.hs"
			],
			[
				".cab",
				"acid-world.cabal"
			],
			[
				"core.",
				"src/Acid/Core.hs"
			],
			[
				"serialise/abs",
				"src/Acid/Core/Serialise/Abstract.hs"
			],
			[
				"acid-core",
				"/code/acid-world/src/Acid/Core/Backend/Abstract.hs"
			],
			[
				"com",
				"compile.sh"
			],
			[
				"t",
				"runTest.sh"
			],
			[
				"abstr",
				"src/Acid/Core/Backend/Abstract.hs"
			],
			[
				"index.",
				"projects/greenes/public/index.php"
			],
			[
				".giti",
				".gitignore"
			],
			[
				"install.",
				"projects/greenes/install/install.sh"
			],
			[
				"config.",
				"projects/greenes/config.inc"
			],
			[
				"resource/log",
				"library/Snowflake/Application/Resource/Log.php"
			],
			[
				"Log",
				"library/Snowflake/Model/Log.php"
			],
			[
				"config",
				"projects/greenes/config.inc"
			],
			[
				"conf",
				"vagrant-setup/config.inc"
			],
			[
				"old",
				"docs/old-readme.md"
			],
			[
				"instal",
				"projects/greenes/install/install.sh"
			],
			[
				"global.",
				"serverSetup/global.sh"
			],
			[
				"read",
				"docs/old-readme.md"
			],
			[
				"ver",
				"VERSION.md"
			],
			[
				"hom",
				"projects/greenes/application/Entities/Homework.php"
			],
			[
				"vers",
				"VERSION.md"
			],
			[
				"accountc",
				"library/Snowflake/Actor/AccountCrossFranchise.php"
			],
			[
				"sli",
				"projects/greenes/application/Entities/Slip.php"
			],
			[
				"studentrep",
				"projects/greenes/application/Entities/StudentReport.php"
			],
			[
				"report",
				"library/Snowflake/Statistics/Report.php"
			],
			[
				"studentio",
				"library/Snowflake/View/Part/Expandable/StudentIOIDetails.php"
			],
			[
				"studentioistats",
				"projects/greenes/application/views/metarenderers/Array/StudentIOIStats.php"
			],
			[
				"entities/home",
				"projects/greenes/application/Entities/Homework.php"
			],
			[
				"studentioidetails",
				"projects/greenes/application/views/metarenderers/Entity/Slip/StudentIOIDetails.php"
			],
			[
				"ioi",
				"projects/greenes/application/stats/Stat/Student/IOI.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"/blizzard/blizzard-client/blizzard-client.sublime-project"
			],
			[
				"blizzard-",
				"/blizzard/blizzard-server/blizzard-server.sublime-project"
			],
			[
				"bli",
				"/blizzard/blizzard-client/blizzard-client.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 174.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
